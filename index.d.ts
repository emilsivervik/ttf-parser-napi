/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export const enum IndexToLocationFormat {
  Short = 0,
  Long = 1
}
/** A [Font Header Table](https://docs.microsoft.com/en-us/typography/opentype/spec/head). */
export interface HEADTable {
  /** Units per EM. */
  unitsPerEm: number
  /** A bounding box that large enough to enclose any glyph from the face. */
  globalBbox: Rect
  /**
   * An index format used by the [Index to Location Table](
   * https://docs.microsoft.com/en-us/typography/opentype/spec/loca).
   */
  indexToLocationFormat: IndexToLocationFormat
}
/** A [Horizontal Header Table](https://docs.microsoft.com/en-us/typography/opentype/spec/hhea). */
export interface HHEATable {
  /** Face ascender. */
  ascender: number
  /** Face descender. */
  descender: number
  /** Face line gap. */
  lineGap: number
  /** Number of metrics in the `hmtx` table. */
  numberOfMetrics: number
}
/** A [Maximum Profile Table](https://docs.microsoft.com/en-us/typography/opentype/spec/maxp). */
export interface MAXPTable {
  /** The total number of glyphs in the face. */
  numberOfGlyphs: number
}
/** A [Name ID](https://docs.microsoft.com/en-us/typography/opentype/spec/name#name-ids). */
export const enum NameId {
  CopyrightNotice = 0,
  Family = 1,
  Subfamily = 2,
  UniqueId = 3,
  FullName = 4,
  Version = 5,
  PostScriptName = 6,
  Trademark = 7,
  Manufacturer = 8,
  Designer = 9,
  Description = 10,
  VendorUrl = 11,
  DesignerUrl = 12,
  License = 13,
  LicenseUrl = 14,
  TypographicFamily = 15,
  TypographicSubFamily = 16,
  CompatibleFull = 17,
  SampleText = 18,
  PostScriptCID = 19,
  WWSFamily = 20,
  WWSSubFamily = 21,
  LightBackgroundPalette = 22,
  DarkBackgroundPalette = 23,
  VariationsPostScriptNamePrefix = 24,
  Unknown = 25
}
/** A [platform ID](https://docs.microsoft.com/en-us/typography/opentype/spec/name#platform-ids). */
export const enum PlatformId {
  Unicode = 0,
  Macintosh = 1,
  Iso = 2,
  Windows = 3,
  Custom = 4
}
/** A [Name Record](https://docs.microsoft.com/en-us/typography/opentype/spec/name#name-records). */
export interface NameRecord {
  /** A platform ID. */
  platformId: PlatformId
  /** A language ID. */
  languageId: string
  /** A [Name ID](https://docs.microsoft.com/en-us/typography/opentype/spec/name#name-ids). */
  nameId: NameId
  name: string
}
/** A [Naming Table](https://docs.microsoft.com/en-us/typography/opentype/spec/name). */
export interface NAMETable {
  names: Array<NameRecord>
}
/** A face style. */
export const enum Style {
  /** A face that is neither italic not obliqued. */
  Normal = 0,
  /** A form that is generally cursive in nature. */
  Italic = 1,
  /** A typically-sloped version of the regular face. */
  Oblique = 2
}
export const enum Permissions {
  Installable = 0,
  Restricted = 1,
  PreviewAndPrint = 2,
  Editable = 3,
  Malformed = 4
}
/** A face [width](https://docs.microsoft.com/en-us/typography/opentype/spec/os2#uswidthclass). */
export const enum Width {
  UltraCondensed = 0,
  ExtraCondensed = 1,
  Condensed = 2,
  SemiCondensed = 3,
  Normal = 4,
  SemiExpanded = 5,
  Expanded = 6,
  ExtraExpanded = 7,
  UltraExpanded = 8
}
export interface ScriptMetrics {
  /** Horizontal face size. */
  xSize: number
  /** Vertical face size. */
  ySize: number
  /** X offset. */
  xOffset: number
  /** Y offset. */
  yOffset: number
}
/** A [OS/2 and Windows Metrics Table](https://docs.microsoft.com/en-us/typography/opentype/spec/os2). */
export interface Table {
  /** Returns weight class. */
  weight: Weight
  /** Returns face width. */
  width: Width
  /** Returns face permissions. */
  permissions: Permissions
  /** Checks if the face subsetting is allowed. */
  isSubsettingAllowed: boolean
  /** Checks if the face bitmaps embedding is allowed. */
  isBitmapEmbeddingAllowed: boolean
  /** Returns subscript metrics. */
  subscriptMetrics: ScriptMetrics
  /** Returns superscript metrics. */
  superscriptMetrics: ScriptMetrics
  /** Returns strikeout metrics. */
  strikeoutMetrics: LineMetrics
  /** Returns style. */
  style: Style
  /** Checks if face is bold. */
  isBold: boolean
  /** Checks if typographic metrics should be used. */
  useTypographicMetrics: boolean
  /** Returns typographic ascender. */
  typographicAscender: number
  /** Returns typographic descender. */
  typographicDescender: number
  /** Returns typographic line gap. */
  typographicLineGap: number
  /** Returns Windows ascender. */
  windowsAscender: number
  /** Returns Windows descender. */
  windowsDescender: number
  /** Returns x height. */
  xHeight?: number
  /** Returns capital height. */
  capitalHeight?: number
}
export interface Tables {
  /** A [Font Header Table](https://docs.microsoft.com/en-us/typography/opentype/spec/head). */
  head: Table
  hhea: Table
  maxp: Table
  os2?: Table
  name?: Table
}
export interface LineMetrics {
  /** Line position. */
  position: number
  /** Line thickness. */
  thickness: number
}
/** A face [weight](https://docs.microsoft.com/en-us/typography/opentype/spec/os2#usweightclass). */
export const enum Weight {
  Thin = 0,
  ExtraLight = 1,
  Light = 2,
  Normal = 3,
  Medium = 4,
  SemiBold = 5,
  Bold = 6,
  ExtraBold = 7,
  Black = 8,
  Other = 9
}
/**
 * A rectangle.
 *
 * Doesn't guarantee that `x_min` <= `x_max` and/or `y_min` <= `y_max`.
 */
export interface Rect {
  xMin: number
  yMin: number
  xMax: number
  yMax: number
}
export class TTFParser {
  /**
   * Checks that face is marked as *Bold*.
   *
   * Returns `false` when OS/2 table is not present.
   */
  isBold: boolean
  /**
   * Checks that face is marked as *Italic*.
   *
   * Returns `false` when OS/2 table is not present.
   */
  isItalic: boolean
  /**
   * Checks that face is marked as *Monospaced*.
   *
   * Returns `false` when `post` table is not present.
   */
  isMonospaced: boolean
  /**
   * Checks that face is marked as *Oblique*.
   *
   * Returns `false` when OS/2 table is not present or when its version is < 4.
   */
  isOblique: boolean
  /**
   * Checks that face is marked as *Regular*.
   *
   * Returns `false` when OS/2 table is not present.
   */
  isRegular: boolean
  /**
   * Checks that face is variable.
   *
   * Simply checks the presence of a `fvar` table.
   */
  isVariable: boolean
  /**
   * Returns a horizontal face ascender.
   *
   * This property is affected by variation axes.
   */
  ascender: number
  /**
   * Returns a horizontal face descender.
   *
   * This property is affected by variation axes.
   */
  descender: number
  /**
   * Returns face's height.
   *
   * This property is affected by variation axes.
   */
  height: number
  /**
   * Returns a horizontal face line gap.
   *
   * This property is affected by variation axes.
   */
  lineGap: number
  /**
   * Returns a horizontal typographic face ascender.
   *
   * Prefer `ascender` unless you explicitly want this. This is a more
   * low-level alternative.
   *
   * This property is affected by variation axes.
   *
   * Returns `None` when OS/2 table is not present.
   */
  typographicAscender?: number
  /**
   * Returns a horizontal typographic face ascender.
   *
   * Prefer `ascender` unless you explicitly want this. This is a more
   * low-level alternative.
   *
   * This property is affected by variation axes.
   *
   * Returns `None` when OS/2 table is not present.
   */
  typographicDescender?: number
  /**
   * Returns a horizontal typographic face line gap.
   *
   * Prefer `line_gap` unless you explicitly want this. This is a more
   * low-level alternative.
   *
   * This property is affected by variation axes.
   *
   * Returns `None` when OS/2 table is not present.
   */
  typographicLineGap?: number
  /**
   * Returns a vertical face ascender.
   *
   * This property is affected by variation axes.
   */
  verticalAscender?: number
  /**
   * Returns a vertical face descender.
   *
   * This property is affected by variation axes.
   */
  verticalDescender?: number
  /**
   * Returns a vertical face height.
   *
   * This method is affected by variation axes.
   */
  verticalHeight?: number
  /**
   * Returns a vertical face line gap.
   *
   * This property is affected by variation axes.
   */
  verticalLineGap?: number
  /**
   * Returns face's units per EM.
   *
   * Guarantee to be in a 16..=16384 range.
   */
  unitsPerEm: number
  /**
   * Returns face's x height.
   *
   * This property is affected by variation axes.
   *
   * Returns `undefined` when OS/2 table is not present or when its version is < 2.
   */
  xHeight?: number
  /**
   * Returns face's capital height.
   *
   * This property is affected by variation axes.
   *
   * Returns `undefined` when OS/2 table is not present or when its version is < 2.
   */
  capitalHeight?: number
  /**
   * Returns face's italic angle.
   *
   * Returns `undefined` when `post` table is not present.
   * Returns face permissions.
   */
  permissions?: Permissions
  /** Checks if the face subsetting is allowed. */
  isSubsettingAllowed: boolean
  /** Checks if the face bitmaps embedding is allowed. */
  isBitmapEmbeddingAllowed: boolean
  /**
   * Returns a total number of glyphs in the face.
   *
   * Never zero.
   */
  numberOfGlyphs: number
  /**
   * Returns face's superscript metrics.
   *
   * This property is affected by variation axes.
   *
   * Returns `undefined` when OS/2 table is not present.
   */
  superscriptMetrics?: ScriptMetrics
  /**
   * Creates a new `TTFParser` from a raw data.
   *
   * `index` indicates the specific font face in a font collection.
   * Use [`fonts_in_collection`] to get the total number of font faces.
   * Defaults to 0 if not set.
   *
   * Required tables: `head`, `hhea` and `maxp`.
   *
   * If an optional table has invalid data it will be skipped.
   */
  constructor(buffer: Buffer, index?: number | undefined | null)
  /** Returns a bounding box that large enough to enclose any glyph from the face. */
  get globalBoundingBox(): Rect
  get tables(): Tables
  get toJSON(): string
}
